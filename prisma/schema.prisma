generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  bio          String     @default("") @db.VarChar(255)
  username     String
  profileImage String
  posts        Post[]
  comments     Comment[]
  liked        Liked[]
  Bookmark     Bookmark[]
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  content   String     @db.VarChar(255)
  image     String     @default("") @db.VarChar(255)
  pauthorId String
  user      User       @relation(fields: [pauthorId], references: [id], onDelete: Cascade)
  liked     Liked[]
  comments  Comment[]
  Bookmark  Bookmark[]

  @@index([pauthorId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(255)
  image     String   @default("") @db.VarChar(255)
  cauthorId String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [cauthorId], references: [id], onDelete: Cascade)
  liked     Liked[]

  @@index([postId])
  @@index([cauthorId])
}

// New Like model with Comment relation
model Liked {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}
